 Okay, I'll try to explain in more detail. For each 2D-Sprite there are 2 bitmaps (one display map and one collision map). The display map has e.g. 16 or 32 bits depth and is used to display the sprite on screen. Thus each pixel of the sprite is represented by 16 or 32 bits in the display map, indicating the pixels color. On the other hand, the collision map of the sprite has only 1 bit depth. A bit will be set in the collision map if a collision can occur for this pixel of the sprite.Say you have an airplane of which you want collision only to occur with the body, not the wings. The body is drawn in color "x", the wings are translucent and thus of color "t":Ê Ê Ê x Ê Ê Ê Ê Ê Ê Ê xxxtttxxxttttttxxxtttÊ Ê x ÊxÊ Êxx xxÊ Êairplanedisplay mapThe collision map would look like this (no collisions at the wings), a "1" denotes a bit set to "1", all other bits set to "0":Ê Ê Ê 1Ê Ê 111Ê Ê 111Ê Ê 111Ê Ê 1 Ê1Ê 11 Ê11Ê airplanecollision mapDuring the game, you would draw/bitblt/whatever the display map of the sprite in the graphics buffer (16 or 32 bits depth) to display it for each frame of your animation (say 60 per second). You would also draw the collision map of your sprite into another buffer of e.g. 8 bits depth (the 'global' collision map), which has exactly the same dimensions as the graphics buffer (you could make this larger to account for collisions outside of the visible area). You will write a non-zero value into the global collision map whenever your sprite has a corresponding bit set in it's collision map. This non-zero value will be the "number" of your sprite if you have multiple sprites:Ê Ê1Ê111Ê111 Ê Ê Ê Ê Ê Ê 2Ê111 Ê Ê Ê Ê Ê 222Ê1 Ê1 Ê Ê Ê Ê Ê 22211 11 Ê Ê Ê Ê 222Ê Ê Ê Ê Ê Ê Ê Ê Ê 2 Ê2Ê Ê Ê Ê Ê Ê Ê Ê Ê22 22Êtwo airplane sprites in theÊ Ê Ê Ê Ê collision mapTo detect collisions, you would use the method I described earlier when drawing sprites in the collision map. You would have the exact same two bitmaps (display map and collision map) for your bullets, so you can have a small bullet with a bigger collision map or vice versa. The collision map of the bullet would not be drawn only once, but along a vector, which gives you the direction the bullet is travelling as well as it's speed (the vector's length):Ê Ê xÊ ÊxxÊ Êxxbullet display mapÊ 1Ê11bullet collision mapIf the bullet is travelling really fast, you'll have a pretty long vector:Ê Ê ^Ê Ê/Ê /Ê//bullet vector (length 4 units)Ê Ê Ê3Ê Ê33Ê 33Ê3333bullet collision map drawn (4 times)Ê Ê along bullet vectorA collision would look something like this:Ê Ê1Ê111Ê111 Ê Ê Ê Ê Ê Ê 2Ê111 Ê Ê Ê Ê Ê 222Ê1 Ê13 Ê Ê Ê Ê 22211 33 Ê Ê Ê Ê 222Ê Ê 33 Ê Ê Ê Ê Ê2 Ê2Ê Ê33 Ê Ê Ê Ê 22 22Ê33Ê collision of bullet (sprite 3) Ê with airplane one (sprite 1).For performance reasons, you would draw the collision maps only every 2nd or third frame (20 or 30/s at 60 fps).Does that make sense?